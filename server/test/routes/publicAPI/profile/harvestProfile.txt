/** ***************************************************************
* Copyright 2020 Advanced Distributed Learning (ADL)
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**************************************************************** */
const mongoose = require('mongoose');
const request = require('supertest');
const MongoMemoryServer = require('mongodb-memory-server').MongoMemoryServer;

const { organization, apiKey, user, profile } = require('../../../../ODM/models');
const app = require('../../../../../app');
const createIRI = require('../../../../utils/createIRI');

const goodStatementBatch1 = require('./test_resources/statement_batch_good_1.json');
const badStatementBatch1 = require('./test_resources/statement_batch_bad_1.json');

describe('Harvest Profile', () => {
    const mongoServer = new MongoMemoryServer();
    jest.setTimeout(10000);

    let key;
    beforeAll(async () => {
        const dburi = await mongoServer.getUri();
        await mongoose.connect(dburi, { useNewUrlParser: true, useUnifiedTopology: true });
        // todo: need to create a working group and hold their uuid

        const wg = new organization({ name: 'wg_name' });
        await wg.save();
        const maker = new user({ username: 'test_name' });
        await maker.save();
        key = new apiKey({ scope: 'organization', scopeObject: wg, createdBy: maker, updatedBy: maker });
        await key.save();
    });

    afterAll(async () => {
        await mongoServer.stop();
    });

    test('should accept a batch of statements', async () => {
        const res = await request(app)
            .post('/api/harvest')
            .set('Content-Type', 'application/json')
            .set('api-key', key.uuid)
            .send(goodStatementBatch1);

        expect(res.status).toEqual(200);
        expect(res.body.success).toBe(true);
        expect(res.body.profile).toHaveProperty('id');
    });

    test('should reject a missing batch of statements', async () => {
        const res = await request(app)
            .post('/api/harvest')
            .set('Content-Type', 'application/json')
            .set('api-key', key.uuid)
            .send();

        expect(res.status).toEqual(400);
        expect(res.body.success).toBe(false);
        expect(res.body.message).toBe('No statements were found.');
    });

    test('should not create a new profile if no statements were provided', async () => {
        const res = await request(app)
            .post('/api/harvest')
            .set('Content-Type', 'application/json')
            .set('api-key', key.uuid)
            .send(badStatementBatch1);

        expect(res.status).toEqual(400);
        expect(res.body.success).toBe(false);
        expect(res.body.message).toBe('No statements were found.');
    });

    test.todo('should save a profile based on the harvested statement components');

    test.todo('should return an error if the requester is not authorized');
});
